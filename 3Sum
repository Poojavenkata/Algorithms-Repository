
# Given an array nums of n integers, are there elements a, b, c in nums such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.

# Note:

# The solution set must not contain duplicate triplets.

# Example:
# Given array nums = [-1, 0, 1, 2, -1, -4],

# A solution set is:
# [[-1, 0, 1],[-1, -1, 2]]




class Solution:
    def threeSum(self, nums):
        """
        :type nums: List[int]
        :rtype: List[List[int]]
        """
        nums.sort()
        print(nums)
        result=[]
        i=0
        for i in range(len(nums)-2):
            if (i>0 and nums[i]==nums[i-1]):
                continue
            partial_target=0-nums[i]
            j=i+1
            k=len(nums)-1
            while j<k:
                partial_sum=nums[j]+nums[k]
                if partial_sum==partial_target:
                    result.append([nums[i],nums[j],nums[k]])
                    while j < k and nums[j] == nums[j+1]:
                        j += 1
                    while j < k and nums[k] == nums[k-1]:
                        k -= 1
                    j += 1; k -= 1
                elif partial_sum>partial_target:
                    k=k-1
                else:
                    j=j+1
        return result
